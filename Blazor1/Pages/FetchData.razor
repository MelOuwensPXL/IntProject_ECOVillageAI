@page "/fetchdata"
@page "/line-chart"
@using Blazor1.Data

@using ChartJs
@using System.Collections;
@using Newtonsoft.Json;
@using Newtonsoft.Json.Linq;
@using System.IO;
@using System.Globalization
@using Radzen;
@using Radzen.Blazor;
@using MudBlazor;








@inject WeatherForecastService ForecastService
@inject IJSRuntime JSRuntime
@inject HttpClient http;




<body id="bd" class="Theme">

    <nav id="nv">
        <ul id="NavBack">
            <div id="shadowNav">
            <li class="Navi">

                <a @onclick="DisplayCurrentData" class="Navi">External Weather</a>
            </li>

            <li class="Navi">

                <a @onclick="GetPredictionData" class="Navi"> Predicted Weather</a>
            </li>

            <li class="Navi">
                <a @onclick="ShowAlert" class="Navi">Co2</a>
            </li>
            <li class="Navi">
                <a @onclick="ShowAlert" class="Navi">Methane</a>
            </li>


            <li class="Navi">
                <img src="../images/noun_humidity_1512650.svg" height="20px" width="20px" />
                <a @onclick="ShowAlert" class="Navi">Relative Humidity</a>
            </li>
            <li class="Navi">
                <a @onclick="ShowAlert" class="Navi">PM2.5</a>
            </li>
            <li class="Navi">
                <a @onclick="ShowAlert" class="Navi">TVOC</a>
            </li>
            <li class="Navi">
                <a @onclick="ShowAlert" class="Navi">Air Pressure</a>
            </li>
            <li class="Navi">
                <a @onclick="ShowAlert" class="Navi">CO</a>
            </li>
            <li class="Navi">
                <a @onclick="ShowAlert" class="Navi">Ozone</a>
            </li>
            <li class="Navi">
                <a @onclick="ShowAlert" class="Navi">NO2</a>
            </li>
            <li class="Navi">
                <a @onclick="ShowAlert" class="Navi">Virus Index</a>
            </li>
            </div>
        </ul>
    </nav>



    @*<img src="https://img.icons8.com/cotton/64/000000/menu.png" style="position:relative ; left:0 ; visibility:hidden"/>
    *@
    <h1 id="Pdata">Air Quality Data</h1>


    <p id="ftxt">This component demonstrates fetching data from a service.</p>
    @*<button @onclick="ShowAlert">Click ME please</button>*@


    <select name="graphType" id="graphtype" style="width:50%">
        <option value="bar">bar</option>
        <option value="line">line</option>
        <option value="pie">pie</option>
        <option value="radar">radar</option>
        <option value="bubble">bubble</option>
    </select>

    <div class="chart-container" style="height:80%; width: 80%" id="chCon">
        <canvas id="testchart" @ref=PopChart readonly>
        </canvas>

        <span id="txt"></span>
    </div>



    @code
{
        public static ArrayList dt = new ArrayList();
        public ArrayList fdates = new ArrayList();

        public Database_Handler handler = new Database_Handler();



        // DataItem dataItem = new DataItem();

        bool smooth = false;
        public class DataItem
        {
            public DateTime Date { get; set; }
            public double Revenue { get; set; }
        }

        string FormatAsUSD(object value)
        {
            return ((double)value).ToString("C0", CultureInfo.CreateSpecificCulture("en-US"));
        }

        //DataItem[] revenue2019 = new DataItem[] {
        //    new DataItem
        //    {
        //        Date = DateTime.Parse("2019-01-01"),
        //        Revenue = 234000
        //    }
        //};

        public DataItem[] datalist;


    }












    @if (forecasts == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {

        ChartJsLineChart lineChart = new ChartJsLineChart();
        <table class="table" @onloadeddata="ShowAlert">
            <thead>
                <tr>
                    <th>Date</th>
                    <th>Temp. (C)</th>
                    <th>Temp. (F)</th>
                    <th>Summary</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var forecast in forecasts)
                {


                    <tr>
                        <td>@forecast.Date.ToShortDateString()</td>
                        <td>@forecast.TemperatureC</td>
                        <td>@forecast.TemperatureF</td>
                        <td>@forecast.Summary</td>
                    </tr>
                    //dt.Add(@forecast.TemperatureC);
                    //fdates.Add(@forecast.Date.ToShortDateString());




                };
                }



            </tbody>

        </table>






        @*<div>
                    <MudChart ChartType="ChartType.Bar" ChartSeries="@Series" @bind-SelectedIndex="Index" XAxisLabels="@XAxisLabels" Width="100%" Height="350px"></MudChart>
                </div>
                <MudText Typo="Typo.h6">Selected portion of the chart: @Index</MudText>

                @code {
                    private int Index = -1; //default value cannot be 0 -> first selectedindex is 0.

                    public List<ChartSeries> Series = new List<ChartSeries>()
                    {
                new ChartSeries() { Name = "United States", Data = new double[] { 40, 20, 25, 27, 46, 60, 48, 80, 15 } },
                new ChartSeries() { Name = "Germany", Data = new double[] { 19, 24, 35, 13, 28, 15, 13, 16, 31 } },
                new ChartSeries() { Name = "Sweden", Data = new double[] { 8, 6, 11, 13, 4, 16, 10, 16, 18 } },
            };
                    public string[] XAxisLabels = { "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep" };*@
    }



    }




    @code {
        private WeatherForecast[] forecasts;

        protected override async Task OnInitializedAsync()
        {
            forecasts = await ForecastService.GetForecastAsync(DateTime.Now);



        }


    }

    @*The Section of the code for graph populations*@



    @code
{
    ElementReference PopChart;
    public Object PolutionData = new Object();
    public string APICALL = "https://api.weatherbit.io/v2.0/current/airquality?lat=51.60333&lon=5.675&key=0a793836894f4ed79a7548da4a58d760";
    public dynamic DArr = null;
    public ArrayList Dates = new ArrayList();
    public ArrayList Temperature = new ArrayList();
    public ArrayList Relative_Humidity = new ArrayList();
    public ArrayList PM25 = new ArrayList();
    public ArrayList TVOC = new ArrayList();
    public ArrayList CO2 = new ArrayList();
    public ArrayList CO = new ArrayList();
    public ArrayList Air_Pressure = new ArrayList();
    public ArrayList Ozone = new ArrayList();
    public ArrayList NO2 = new ArrayList();
    public ArrayList AQI_calculated = new ArrayList();

        @*
            private async Task GetPolutionData()
            {
                PolutionData = await http.GetJsonAsync<Object>("https://api.weatherbit.io/v2.0/current/airquality?lat=35.7721&lon=-78.63861&key=0a793836894f4ed79a7548da4a58d760");
            }
        *@

public static double[] DataArr = new double[dt.Count];
async Task GetPredictionData()
{
    Dates = new ArrayList();
    Temperature = new ArrayList();
    Relative_Humidity = new ArrayList();
    PM25 = new ArrayList();
    TVOC = new ArrayList();
    CO2 = new ArrayList();
    CO = new ArrayList();
    Air_Pressure = new ArrayList();
    Ozone = new ArrayList();
    NO2 = new ArrayList();
    AQI_calculated = new ArrayList();
    //string jsonFromFile = @"..\Blazor1\Export_DataFrame (1) (1).json";

    //object Predicted = await http.GetJsonAsync<Object>("../Export_DataFrame (1) (1).json");
    //await JSRuntime.InvokeVoidAsync(identifier: "mylog", Predicted);

    using (StreamReader r = new StreamReader("Export_DataFrame (1) (1).json"))
    {
        string json = r.ReadToEnd();
        dynamic array = JsonConvert.DeserializeObject(json);

        DArr = array;



        foreach (var item in DArr)
        {
            Console.WriteLine(item);
        }
        for (int i = 0; i < DArr.Date.Count; i++)
        {
            Dates.Add(DArr.Date[i]);
            Temperature.Add(DArr.Temperature[i]);
            CO.Add(DArr.CO[i]);
            CO2.Add(DArr.CO2[i]);
            NO2.Add(DArr.NO2[i]);
            Relative_Humidity.Add(DArr.Relative_Humidity[i]);
            PM25.Add(DArr.PM25[i]);
            TVOC.Add(DArr.TVOC[i]);
            Air_Pressure.Add(DArr.Air_Pressure[i]);
            Ozone.Add(DArr.Ozone[i]);
            AQI_calculated.Add(DArr.AQI_calculated[i]);
            handler.Insert_AQI_Data("Living Room",DateTime.SpecifyKind(DArr.Date[i],DateTimeKind.Utc), DArr.Relative_Humidity[i], DArr.PM25[i], DArr.TVOC[i], DArr.CO2[i], DArr.CO[i], DArr.Air_Pressure[i], DArr.Ozone[i], DArr.NO2[i], DArr.AQI_calculated[i]);

        }










        foreach (var item in Dates)
        {
            Console.WriteLine(item);
        }

        foreach (var item in Temperature)
        {
            Console.WriteLine(item);
        }

        Console.WriteLine(Dates.Count);
    }



    //   await JSRuntime.InvokeVoidAsync(identifier: "", Temperature, Dates ,CO ,CO2 ,NO2 ,Relative_Humidity ,PM25 ,TVOC, Air_Pressure, Ozone ,AQI_calculated);


}


async Task ShowAlert()
// 51. 36 11.99
{
    GetPredictionData();

    PolutionData = await http.GetJsonAsync<Object>(APICALL);

    await JSRuntime.InvokeVoidAsync(identifier: "LogList", PolutionData);


    //     await JSRuntime.InvokeVoidAsync(identifier: "setChartNull");
    Console.WriteLine("Temps: ");
    foreach (var item in Temperature)
    {

        dt.Add(item);

    }
    foreach (var item in Dates)
    {

        fdates.Add(item);
    }

    for (int i = 0; i < fdates.Count; i++)
    {
        Console.WriteLine(fdates[i]+" : "+ dt[i]);

    }
    await JSRuntime.InvokeVoidAsync(identifier: "createAlert");
    await JSRuntime.InvokeVoidAsync(identifier: "SetElement", "txt");
    Dates.Add("asdasdsdasdsad");



    await JSRuntime.InvokeVoidAsync(identifier: "GenerateBars", Temperature, Dates);
    dt.Clear();
    fdates.Clear();




    // await JSRuntime.InvokeVoidAsync(identifier: "Pop",PopChart);
}

async Task DisplayCurrentData()
{
    PolutionData = await http.GetJsonAsync<Object>("https://api.weatherbit.io/v2.0/current/airquality?lat=51.60333&lon=5.675&key=0a793836894f4ed79a7548da4a58d760");
    await JSRuntime.InvokeVoidAsync(identifier: "DisplayCurrentData", PolutionData);
    dt.Clear();
    fdates.Clear();
    PolutionData = null;




}

















    }


   


</body>
<MudBlazor.MudThemeProvider></MudBlazor.MudThemeProvider>